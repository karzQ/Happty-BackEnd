{
  "openapi": "3.0.0",
  "info": {
    "title": "Happty API",
    "description": "This is Happty's API",
    "contact": {
      "email": "you@your-company.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/karzQ/happty/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "Application users"
    },
    {
      "name": "parties",
      "description": "Parties created by users"
    },
    {
      "name": "notifications",
      "description": "Notifications received by users"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Login an user",
        "description": "Login an user with credentials",
        "operationId": "Login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_202"
                }
              }
            }
          },
          "401": {
            "description": "User not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                }
              }
            }
          },
          "500": {
            "description": "Server internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all users",
        "description": "Search every users",
        "operationId": "findUsers",
        "responses": {
          "200": {
            "description": "Results found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "500": {
            "description": "A server error has occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_500_1"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add a new user",
        "description": "Add an user",
        "operationId": "addUser",
        "requestBody": {
          "description": "Party object to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Party"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfuly created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_201"
                }
              }
            }
          },
          "400": {
            "description": "An error has occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "409": {
            "description": "This user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_409"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get an user",
        "description": "This resource represents an individual user in the system. Each user is identified by a `userId`.\n",
        "operationId": "findOneUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Do operation(s) due to the specified `userId` path parameter.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Results not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Modify an user",
        "description": "Modify an user specified by `userId` path parameter.\n",
        "operationId": "ModifiyUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Do operation(s) due to the specified `userId` path parameter.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully modified"
          },
          "404": {
            "description": "Results not found"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete an user",
        "description": "Delete an user specified by `userId` path parameter.\n",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Do operation(s) due to the specified `userId` path parameter.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully deleted"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/parties": {
      "get": {
        "tags": [
          "parties"
        ],
        "summary": "Get all parties",
        "description": "Get all parties",
        "operationId": "findAllParties",
        "responses": {
          "200": {
            "description": "Results found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Party"
                }
              }
            }
          },
          "404": {
            "description": "Results not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404_1"
                }
              }
            }
          }
        }
      }
    },
    "/parties/{partyId}": {
      "get": {
        "tags": [
          "parties"
        ],
        "summary": "Get a party",
        "description": "Find a specific party by the specified `partyId` path parameter.\n",
        "operationId": "findOneParty",
        "parameters": [
          {
            "name": "partyId",
            "in": "path",
            "description": "Do operation(s) due to the specified `partyId` path parameter.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results found"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      },
      "put": {
        "tags": [
          "parties"
        ],
        "summary": "Modify a pary",
        "description": "Modify an user specified by `userId` path parameter.\n",
        "operationId": "ModifiyParty",
        "parameters": [
          {
            "name": "partyId",
            "in": "path",
            "description": "Do operation(s) due to the specified `partyId` path parameter.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Party successfully modified"
          },
          "404": {
            "description": "Party not found"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      },
      "post": {
        "tags": [
          "parties"
        ],
        "summary": "Add a party",
        "description": "Add a party",
        "operationId": "addParty",
        "parameters": [
          {
            "name": "partyId",
            "in": "path",
            "description": "Do operation(s) due to the specified `partyId` path parameter.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Party object to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Party"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Party successfuly created"
          },
          "400": {
            "description": "An error has occured"
          },
          "409": {
            "description": "This party already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "parties"
        ],
        "summary": "Delete a party",
        "description": "Delete an user specified by `userId` path parameter.\n",
        "operationId": "DeleteParty",
        "parameters": [
          {
            "name": "partyId",
            "in": "path",
            "description": "Do operation(s) due to the specified `partyId` path parameter.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Party successfully deleted"
          },
          "404": {
            "description": "Party not found"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/parties/{userId}": {},
    "/parties/{userId}/{partyId}": {},
    "/notifications/{userId}": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "Get all user's notifications",
        "description": "Get all user's notifications",
        "operationId": "findAllUserNotifications",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Do operation(s) due to the specified `userId` path parameter.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Party"
                }
              }
            }
          },
          "404": {
            "description": "Results not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404_1"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "notifications"
        ],
        "summary": "Apply true to isRead stats to notification(s)",
        "description": "Apply the `isRead` status at `true` to one or more notifications.\n",
        "operationId": "ReadNotification",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Do operation(s) due to the specified `userId` path parameter.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notification(s) successfully modified"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/notifications/{userId}/{notificationId}": {
      "delete": {
        "tags": [
          "notifications"
        ],
        "summary": "Delete a user's notification",
        "description": "Delete an user's notification specified by `userId` path parameter.\n",
        "operationId": "DeleteOneNotification",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User unique identifier.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "Notification unique identifer",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Party successfully deleted"
          },
          "404": {
            "description": "Party not found"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Party": {
        "required": [
          "date",
          "guests",
          "location",
          "name",
          "tasks"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Maxime's party"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2016-08-29T09:12:33.001Z"
          },
          "location": {
            "type": "string",
            "example": "12 rue de la pépinière, 28230 Epernon"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "guests": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "e5rt45re1t65er1t61er6t1er6"
            }
          }
        }
      },
      "Task": {
        "required": [
          "designated",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "example": "Bring chips & merguez"
          },
          "designated": {
            "type": "string",
            "example": "e5rt45re1t65er1t61er6t1er6"
          }
        }
      },
      "User": {
        "required": [
          "email",
          "firstname",
          "lastname",
          "password",
          "phone",
          "pseudo"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "e564r4er4e45rz4er654ez6r4zer8"
          },
          "firstname": {
            "type": "string",
            "example": "Jean"
          },
          "lastname": {
            "type": "string",
            "example": "Dupont"
          },
          "pseudo": {
            "type": "string",
            "example": "Toto28#0000"
          },
          "email": {
            "type": "string",
            "example": "jean.dupont@gmail.com"
          },
          "password": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "example": 21
          },
          "phone": {
            "type": "string",
            "example": "100933828"
          },
          "profilPicturePath": {
            "type": "string",
            "example": "/dir/img.png"
          },
          "uniqueCode": {
            "type": "string",
            "example": "12E8E1R1GZ8"
          }
        }
      },
      "Notification": {
        "required": [
          "content",
          "id",
          "isRead"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "e564r4er4e45rz4er654ez6r4zer8"
          },
          "content": {
            "type": "string",
            "example": "This is a notification"
          },
          "isRead": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "body": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "toto@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "rootRoot12"
          }
        }
      },
      "inline_response_202": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 202
          },
          "message": {
            "type": "string",
            "example": "Successfully logged-in"
          },
          "token": {
            "type": "string",
            "example": "1erf5te16tr581t6re51tre1tze416t"
          }
        }
      },
      "inline_response_401": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "The couple Email/Password is not working"
          }
        }
      },
      "inline_response_500": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Server internal error"
          }
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200
          },
          "user": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "inline_response_500_1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "No results found"
          },
          "users": {
            "type": "array",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "inline_response_201": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 201
          }
        }
      },
      "inline_response_400": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 400
          }
        }
      },
      "inline_response_409": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 409
          }
        }
      },
      "inline_response_404": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "No results found"
          },
          "users": {
            "type": "array",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "inline_response_404_1": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "No results found"
          },
          "parties": {
            "type": "array",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/Party"
            }
          }
        }
      }
    }
  }
}